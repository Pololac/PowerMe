name: deploy

on:
    push:
        branches: ["main"]

concurrency:
    group: deploy-main
    cancel-in-progress: false

env:
    REGISTRY: ghcr.io
    IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        strategy:
            matrix:
                service: [frontend, backend]
            fail-fast: false

        steps:
            - uses: actions/checkout@v4

            - name: Login to GHCR
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }} # Créé auto par GitHub pour chaque workflow

            - name: Build and push ${{ matrix.service }}
              run: |
                  IMAGE_NAME=${{ env.IMAGE_PREFIX }}/${{ matrix.service }}

                  # Construction de l'image Docker à partir des Dockerfiles
                  docker build -f ./${{ matrix.service }}/Dockerfile -t ${IMAGE_NAME}:${{ github.sha }} ./${{ matrix.service }}                    docker tag ${ IMAGE_NAME }:${{ github.sha }} ${ IMAGE_NAME }:latest

                  # Push vers GitHub Container Registry
                  docker push ${ IMAGE_NAME }:${{ github.sha }}
                  docker push ${ IMAGE_NAME }:latest

    deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        environment:
            name: production
            url: http://${{ vars.APP_URL }}

        steps:
            - name: Deploy to VPS
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.SSH_HOST }}
                  username: ${{ secrets.SSH_USER }}
                  key: ${{ secrets.SSH_KEY }}
                  script: |
                      set -e
                      cd ${{ secrets.DEPLOY_DIR }}

                      # Permet de déployer les versions exactes du code buildé dans le pipeline
                      export FRONT_TAG=${{ github.sha }}
                      export BACK_TAG=${{ github.sha }}

                      # Pull les nouvelles images & Redémarre les containers
                      docker compose pull
                      docker compose up -d --remove-orphans --wait

                      # Nettoie les anciennes images
                      docker image prune -af --filter "until=24h"

                      docker compose ps
            # ---------- NOTIFICATION ----------
            - name: Notify deployment success
              if: success()
              run: echo "✅ Déployé sur https://powerme.placoste.dev"
